//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace SLS.SilverLight.FilterShrink.ServiceModel {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="T_Model", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class T_Model : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContentField;
        
        private string DescptionField;
        
        private string NameField;
        
        private string PlayTypeIDField;
        
        private string TypeNameField;
        
        private System.Nullable<long> UserIDField;
        
        private long idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descption {
            get {
                return this.DescptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescptionField, value) != true)) {
                    this.DescptionField = value;
                    this.RaisePropertyChanged("Descption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayTypeID {
            get {
                return this.PlayTypeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayTypeIDField, value) != true)) {
                    this.PlayTypeIDField = value;
                    this.RaisePropertyChanged("PlayTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceModel.IModel")]
    public interface IModel {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/DoWork", ReplyAction="http://tempuri.org/IModel/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/GetModel", ReplyAction="http://tempuri.org/IModel/GetModelResponse")]
        System.IAsyncResult BeginGetModel(long UserID, string PlayType, string TypeName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> EndGetModel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/InsertModel", ReplyAction="http://tempuri.org/IModel/InsertModelResponse")]
        System.IAsyncResult BeginInsertModel(long UserID, string PlayType, string Name, string Content, string Descption, string TypeName, System.AsyncCallback callback, object asyncState);
        
        int EndInsertModel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/GetModelByID", ReplyAction="http://tempuri.org/IModel/GetModelByIDResponse")]
        System.IAsyncResult BeginGetModelByID(long ID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> EndGetModelByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IModel/DelModelByID", ReplyAction="http://tempuri.org/IModel/DelModelByIDResponse")]
        System.IAsyncResult BeginDelModelByID(long ID, System.AsyncCallback callback, object asyncState);
        
        int EndDelModelByID(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModelChannel : SLS.SilverLight.FilterShrink.ServiceModel.IModel, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetModelByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetModelByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelModelByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelModelByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelClient : System.ServiceModel.ClientBase<SLS.SilverLight.FilterShrink.ServiceModel.IModel>, SLS.SilverLight.FilterShrink.ServiceModel.IModel {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetModelDelegate;
        
        private EndOperationDelegate onEndGetModelDelegate;
        
        private System.Threading.SendOrPostCallback onGetModelCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertModelDelegate;
        
        private EndOperationDelegate onEndInsertModelDelegate;
        
        private System.Threading.SendOrPostCallback onInsertModelCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetModelByIDDelegate;
        
        private EndOperationDelegate onEndGetModelByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetModelByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelModelByIDDelegate;
        
        private EndOperationDelegate onEndDelModelByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDelModelByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ModelClient() {
        }
        
        public ModelClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModelClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetModelCompletedEventArgs> GetModelCompleted;
        
        public event System.EventHandler<InsertModelCompletedEventArgs> InsertModelCompleted;
        
        public event System.EventHandler<GetModelByIDCompletedEventArgs> GetModelByIDCompleted;
        
        public event System.EventHandler<DelModelByIDCompletedEventArgs> DelModelByIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLS.SilverLight.FilterShrink.ServiceModel.IModel.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SLS.SilverLight.FilterShrink.ServiceModel.IModel.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLS.SilverLight.FilterShrink.ServiceModel.IModel.BeginGetModel(long UserID, string PlayType, string TypeName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetModel(UserID, PlayType, TypeName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> SLS.SilverLight.FilterShrink.ServiceModel.IModel.EndGetModel(System.IAsyncResult result) {
            return base.Channel.EndGetModel(result);
        }
        
        private System.IAsyncResult OnBeginGetModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long UserID = ((long)(inValues[0]));
            string PlayType = ((string)(inValues[1]));
            string TypeName = ((string)(inValues[2]));
            return ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).BeginGetModel(UserID, PlayType, TypeName, callback, asyncState);
        }
        
        private object[] OnEndGetModel(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> retVal = ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).EndGetModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetModelCompleted(object state) {
            if ((this.GetModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetModelCompleted(this, new GetModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetModelAsync(long UserID, string PlayType, string TypeName) {
            this.GetModelAsync(UserID, PlayType, TypeName, null);
        }
        
        public void GetModelAsync(long UserID, string PlayType, string TypeName, object userState) {
            if ((this.onBeginGetModelDelegate == null)) {
                this.onBeginGetModelDelegate = new BeginOperationDelegate(this.OnBeginGetModel);
            }
            if ((this.onEndGetModelDelegate == null)) {
                this.onEndGetModelDelegate = new EndOperationDelegate(this.OnEndGetModel);
            }
            if ((this.onGetModelCompletedDelegate == null)) {
                this.onGetModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetModelCompleted);
            }
            base.InvokeAsync(this.onBeginGetModelDelegate, new object[] {
                        UserID,
                        PlayType,
                        TypeName}, this.onEndGetModelDelegate, this.onGetModelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLS.SilverLight.FilterShrink.ServiceModel.IModel.BeginInsertModel(long UserID, string PlayType, string Name, string Content, string Descption, string TypeName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertModel(UserID, PlayType, Name, Content, Descption, TypeName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SLS.SilverLight.FilterShrink.ServiceModel.IModel.EndInsertModel(System.IAsyncResult result) {
            return base.Channel.EndInsertModel(result);
        }
        
        private System.IAsyncResult OnBeginInsertModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long UserID = ((long)(inValues[0]));
            string PlayType = ((string)(inValues[1]));
            string Name = ((string)(inValues[2]));
            string Content = ((string)(inValues[3]));
            string Descption = ((string)(inValues[4]));
            string TypeName = ((string)(inValues[5]));
            return ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).BeginInsertModel(UserID, PlayType, Name, Content, Descption, TypeName, callback, asyncState);
        }
        
        private object[] OnEndInsertModel(System.IAsyncResult result) {
            int retVal = ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).EndInsertModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertModelCompleted(object state) {
            if ((this.InsertModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertModelCompleted(this, new InsertModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertModelAsync(long UserID, string PlayType, string Name, string Content, string Descption, string TypeName) {
            this.InsertModelAsync(UserID, PlayType, Name, Content, Descption, TypeName, null);
        }
        
        public void InsertModelAsync(long UserID, string PlayType, string Name, string Content, string Descption, string TypeName, object userState) {
            if ((this.onBeginInsertModelDelegate == null)) {
                this.onBeginInsertModelDelegate = new BeginOperationDelegate(this.OnBeginInsertModel);
            }
            if ((this.onEndInsertModelDelegate == null)) {
                this.onEndInsertModelDelegate = new EndOperationDelegate(this.OnEndInsertModel);
            }
            if ((this.onInsertModelCompletedDelegate == null)) {
                this.onInsertModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertModelCompleted);
            }
            base.InvokeAsync(this.onBeginInsertModelDelegate, new object[] {
                        UserID,
                        PlayType,
                        Name,
                        Content,
                        Descption,
                        TypeName}, this.onEndInsertModelDelegate, this.onInsertModelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLS.SilverLight.FilterShrink.ServiceModel.IModel.BeginGetModelByID(long ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetModelByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> SLS.SilverLight.FilterShrink.ServiceModel.IModel.EndGetModelByID(System.IAsyncResult result) {
            return base.Channel.EndGetModelByID(result);
        }
        
        private System.IAsyncResult OnBeginGetModelByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            return ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).BeginGetModelByID(ID, callback, asyncState);
        }
        
        private object[] OnEndGetModelByID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> retVal = ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).EndGetModelByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetModelByIDCompleted(object state) {
            if ((this.GetModelByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetModelByIDCompleted(this, new GetModelByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetModelByIDAsync(long ID) {
            this.GetModelByIDAsync(ID, null);
        }
        
        public void GetModelByIDAsync(long ID, object userState) {
            if ((this.onBeginGetModelByIDDelegate == null)) {
                this.onBeginGetModelByIDDelegate = new BeginOperationDelegate(this.OnBeginGetModelByID);
            }
            if ((this.onEndGetModelByIDDelegate == null)) {
                this.onEndGetModelByIDDelegate = new EndOperationDelegate(this.OnEndGetModelByID);
            }
            if ((this.onGetModelByIDCompletedDelegate == null)) {
                this.onGetModelByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetModelByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetModelByIDDelegate, new object[] {
                        ID}, this.onEndGetModelByIDDelegate, this.onGetModelByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLS.SilverLight.FilterShrink.ServiceModel.IModel.BeginDelModelByID(long ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelModelByID(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SLS.SilverLight.FilterShrink.ServiceModel.IModel.EndDelModelByID(System.IAsyncResult result) {
            return base.Channel.EndDelModelByID(result);
        }
        
        private System.IAsyncResult OnBeginDelModelByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            return ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).BeginDelModelByID(ID, callback, asyncState);
        }
        
        private object[] OnEndDelModelByID(System.IAsyncResult result) {
            int retVal = ((SLS.SilverLight.FilterShrink.ServiceModel.IModel)(this)).EndDelModelByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDelModelByIDCompleted(object state) {
            if ((this.DelModelByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelModelByIDCompleted(this, new DelModelByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelModelByIDAsync(long ID) {
            this.DelModelByIDAsync(ID, null);
        }
        
        public void DelModelByIDAsync(long ID, object userState) {
            if ((this.onBeginDelModelByIDDelegate == null)) {
                this.onBeginDelModelByIDDelegate = new BeginOperationDelegate(this.OnBeginDelModelByID);
            }
            if ((this.onEndDelModelByIDDelegate == null)) {
                this.onEndDelModelByIDDelegate = new EndOperationDelegate(this.OnEndDelModelByID);
            }
            if ((this.onDelModelByIDCompletedDelegate == null)) {
                this.onDelModelByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelModelByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDelModelByIDDelegate, new object[] {
                        ID}, this.onEndDelModelByIDDelegate, this.onDelModelByIDCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SLS.SilverLight.FilterShrink.ServiceModel.IModel CreateChannel() {
            return new ModelClientChannel(this);
        }
        
        private class ModelClientChannel : ChannelBase<SLS.SilverLight.FilterShrink.ServiceModel.IModel>, SLS.SilverLight.FilterShrink.ServiceModel.IModel {
            
            public ModelClientChannel(System.ServiceModel.ClientBase<SLS.SilverLight.FilterShrink.ServiceModel.IModel> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetModel(long UserID, string PlayType, string TypeName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = UserID;
                _args[1] = PlayType;
                _args[2] = TypeName;
                System.IAsyncResult _result = base.BeginInvoke("GetModel", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> EndGetModel(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> _result = ((System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model>)(base.EndInvoke("GetModel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertModel(long UserID, string PlayType, string Name, string Content, string Descption, string TypeName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = UserID;
                _args[1] = PlayType;
                _args[2] = Name;
                _args[3] = Content;
                _args[4] = Descption;
                _args[5] = TypeName;
                System.IAsyncResult _result = base.BeginInvoke("InsertModel", _args, callback, asyncState);
                return _result;
            }
            
            public int EndInsertModel(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("InsertModel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetModelByID(long ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("GetModelByID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> EndGetModelByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model> _result = ((System.Collections.ObjectModel.ObservableCollection<SLS.SilverLight.FilterShrink.ServiceModel.T_Model>)(base.EndInvoke("GetModelByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDelModelByID(long ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DelModelByID", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDelModelByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("DelModelByID", _args, result)));
                return _result;
            }
        }
    }
}
